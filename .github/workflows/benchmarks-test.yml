# this is a manual workflow that compare benchmarks with the same runner and the same version of python
# choose runner, perceval ref, quandelibc ref, save data and log 
# runs benchmarks at benchmarks/benchmark_*.py
# save data and log on the branch launched on github (.benchmarks/<branch>_<runner>_CPython-<PyVersion>/<nb_runner>_<branch>_<tag_version>__<commit>.json)

name: Benchmarks

on:
  workflow_dispatch:
    inputs:
      os:
        description: 'Choose Runner'
        required: true
        default: 'MiniMac_arm64'
        type: choice
        options:
          - MiniMac_arm64
          - ubuntu-latest
      commit_ref:
        description: Use specific perceval's ref (branch, tag or SHA)
        default: ''
        type: string
        required: false
      quandelibc_ref:
        description: Use specific Quandelibc's ref (branch, tag or SHA)
        default: ''
        type: string
        required: false
      save:
        description: 'Save data'
        default: false
        required: false
        type: boolean
      save_log:
        description: 'Save log'
        default: false
        required: false
        type: boolean

env:
  python_v: '3.9'

jobs:
  build-quandelibc:
    if: inputs.quandelibc_ref != ''
    name: Build quandelibc "${{ inputs.quandelibc_ref }}" wheels for ${{ github.event.inputs.os }}
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v3
        with:
          repository: Quandela/QuandeLibC
          ref: ${{ inputs.quandelibc_ref }}
          path: quandelibc
          submodules: recursive
          fetch-depth: 0

      - name: Set up Python 3.9
        uses: actions/setup-python@v3
        with:
          python-version: 3.9

      - name: Build wheels for cp39
        env:
          CIBW_BUILD: 'cp39-*'
          CIBW_SKIP: '*-musllinux_*'
          CIBW_ARCHS_LINUX: x86_64
          CIBW_ARCHS_MACOS: arm64
          CIBW_ARCHS_WINDOWS: AMD64
          CIBW_BUILD_VERBOSITY: 1
        run: |
          cd quandelibc
          python -m pip install cibuildwheel
          python -m cibuildwheel --output-dir precompiled-quandelibc

      - name: Store wheel
        uses: actions/upload-artifact@v2
        with:
          name: python-package-distributions
          path: quandelibc/precompiled-quandelibc

  benchmark:
    name: Run pytest-benchmark benchmark example
    if: ${{ always() }}
    needs:
      - build-quandelibc
    runs-on: ${{ github.event.inputs.os }}
    steps:
      - name: Extract current branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_branch

      - name: chekout on perceval's ref
        uses: actions/checkout@v2
        with:
          ref: ${{ inputs.commit_ref }}
          fetch-depth: 0

      # install python, already DL on MiniMac_arm64
      - if:  ${{ github.event.inputs.os != 'MiniMac_arm64' }}
        name: setup python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.python_v }}

      - name: setup virtual env
        uses: syphar/restore-virtualenv@v1
        id: cache-virtualenv

      - if: inputs.quandelibc_ref != ''
        name: Fetch previously compiled Quandelibc
        uses: actions/download-artifact@v2
        with:
          name: python-package-distributions
          path: precompiled-quandelibc

      - if: inputs.quandelibc_ref != '' 
        name: Install previously compiled Quandelibc
        run: |
          python -m pip uninstall -y quandelibc
          bash -c "python -m pip install precompiled-quandelibc/*macosx_11_0_arm64.whl"

      - name: Install dependencies
        run: |
            python -m pip install --upgrade pip
            python -m pip install -r requirements.txt pytest pytest-benchmark
            python -m pip install .

      # save var env use bash shell for notLinux
      - if: runner.os == 'Linux'
        name: setup var_env on linux
        run: |
          echo "folder_env=${{ github.ref_name }}_${{ github.event.inputs.os }}-CPython-${{ env.python_v }}" >> $GITHUB_ENV
          echo "folder_file_json=.benchmarks/${{ github.ref_name }}_${{ github.event.inputs.os }}-CPython-${{ env.python_v }}/log/${{ github.run_number }}_${{ github.ref_name }}_$( git describe --tags )_${{ github.sha }}.json" >> $GITHUB_ENV
      - if: runner.os != 'Linux'
        name: setup var_env on notLinux
        run: |
          echo "folder_env=${{ github.ref_name }}_${{ github.event.inputs.os }}-CPython-${{ env.python_v }}" >> $GITHUB_ENV
          echo "folder_file_json=.benchmarks/${{ github.ref_name }}_${{ github.event.inputs.os }}-CPython-${{ env.python_v }}/log/${{ github.run_number }}_${{ github.ref_name }}_$( git describe --tags )_${{ github.sha }}.json" >> $GITHUB_ENV
        shell: Bash

      - name: Run benchmark
        run: |
          python -m pytest benchmark/benchmark_*.py --benchmark-json out.json --benchmark-storage file://./.benchmarks/log/${{ env.folder_env }} 
          mv out.json ${{ env.folder_file_json }}

      # upload the result on action GitHub
      - name: upload the log result
        uses: actions/upload-artifact@v3
        with:
          name: pytest_benchmarks_log_${{ env.folder_env }}_${{ github.run_number }}
          path: ${{ env.folder_file_json }}

      - name: checkout to avoid bug
        uses: actions/checkout@v2
        with:
          ref: gh-pages
      
      - name: Download the log result
        uses: actions/download-artifact@v3
        with:
          name: pytest_benchmarks_log_${{ env.folder_env }}_${{ github.run_number }}
          path: .benchmarks/log/${{ env.folder_env }}

      # use github-action-benchmark for graph
      - name: compare result with last version and save on current branch
        uses: benchmark-action/github-action-benchmark@v1
        with:
          name: Automated report
          tool: 'pytest'
          output-file-path: ${{ env.folder_file_json }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          auto-push: ${{ inputs.save }}
          benchmark-data-dir-path: .benchmarks/${{ env.folder_env }}
          alert-threshold: '120%'
          gh-pages-branch: ${{ steps.extract_branch.outputs.branch }}
          comment-on-alert: true

      - name: checkout in current branch
        uses: actions/checkout@v2
        with:
          ref: ${{ steps.extract_branch.outputs.branch }}

      - if: inputs.save_log
        name: Download the Log result
        uses: actions/download-artifact@v3
        with:+
          name: pytest_benchmarks_log_${{ env.folder_env }}_${{ github.run_number }}
          path: .benchmarks/log/${{ env.folder_env }}

      - if: inputs.save_log
        name: Save benchmark report in current branch
        run: |
          git pull
          git config --global user.name 'github-action-benchmark'
          git config --global user.email 'github@users.noreply.github.com'
          git add ${{ env.folder_file_json }}
          git commit -am "Automated benchmark log report"
          git push