# MIT License
#
# Copyright (c) 2022 Quandela
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# As a special exception, the copyright holders of exqalibur library give you
# permission to combine exqalibur with code included in the standard release of
# Perceval under the MIT license (or modified versions of such code). You may
# copy and distribute such a combined system following the terms of the MIT
# license for both exqalibur and Perceval. This exception for the usage of
# exqalibur is limited to the python bindings used by Perceval.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

from abc import ABC, abstractmethod
from typing import List
from enum import Enum

from perceval.utils import BasicState, Encoding, LogicalState
from .abstract_component import AComponent


def _port_size(encoding: Encoding):
    if encoding == Encoding.DUAL_RAIL:
        return 2
    elif encoding == Encoding.POLARIZATION:
        return 1
    elif encoding == Encoding.TIME:
        return 1
    elif encoding == Encoding.RAW:
        return 1
    return None  # Port size cannot be deduced only with encoding in case of Qudit-encoding


class PortLocation(Enum):
    INPUT = 0
    OUTPUT = 1
    IN_OUT = 2


class APort(AComponent):
    def __init__(self, size, name):
        super().__init__(size, name)

    @staticmethod
    def supports_location(loc: PortLocation) -> bool:
        return True

    @abstractmethod
    def is_output_photonic_mode_closed(self):
        """
        Returns True if the photonic mode is closed by the port
        """

    @staticmethod
    @abstractmethod
    def has_basic_state_equivalent() -> bool:
        """
        Returns True if the port has a basic state equivalent
        """

    @staticmethod
    @abstractmethod
    def has_logical_state_equivalent() -> bool:
        """
        Returns True if the port has a logical state equivalent
        """


class Port(APort):
    def __init__(self, encoding, name):
        assert encoding != Encoding.QUDIT, "Qudit encoded ports must be created by instanciating QuditPort"
        super().__init__(_port_size(encoding), name)
        self._encoding = encoding

    @property
    def encoding(self):
        return self._encoding

    def is_output_photonic_mode_closed(self):
        return False

    @staticmethod
    def has_basic_state_equivalent() -> bool:
        return True

    @staticmethod
    def has_logical_state_equivalent() -> bool:
        return True

    def to_basic_state(self, qubit_state: int) -> BasicState:
        """Return the equivalent BasicState from the qubit state

        :param state: qubit state (0 or 1)
        :raises NotImplementedError: QUBIT and POLARIZATION encoding not currently supported
        :return: The corresponding BasicState
        """
        if qubit_state not in [0, 1]:
            raise ValueError("state should be 0 or 1")
        if self.encoding == Encoding.RAW or self.encoding == Encoding.TIME:
            return BasicState([int(qubit_state)])
        elif self.encoding == Encoding.DUAL_RAIL:
            return BasicState("|0,1>") if qubit_state else BasicState("|1,0>")
        elif self.encoding == Encoding.QUDIT or self.encoding == Encoding.POLARIZATION:
            raise NotImplementedError


class QuditPort(Port):
    def __init__(self, n, name):
        super(Port, self).__init__(2**n, name)
        self._n = n
        self._encoding = Encoding.QUDIT


class Herald(APort):
    def __init__(self, value: int, name=None):
        assert value == 0 or value == 1, "Herald value should be 0 or 1"
        self._autogenerated_name = isinstance(name, int)
        if self._autogenerated_name:
            name = f'herald{name}'
        super().__init__(1, name)
        self._value = value

    def is_output_photonic_mode_closed(self):
        return True

    @property
    def user_given_name(self):
        if self._autogenerated_name:
            return None
        return self._name

    @property
    def expected(self):
        return self._value

    @staticmethod
    def has_basic_state_equivalent() -> bool:
        return True

    @staticmethod
    def has_logical_state_equivalent() -> bool:
        return False

    def to_basic_state(self) -> BasicState:
        """Return the equivalent BasicState from _value
        """
        return BasicState([self._value])


class ADetector(APort, ABC):
    def __init__(self, name=''):
        super().__init__(1, name)

    @abstractmethod
    def trigger(self, value):
        pass

    @staticmethod
    def supports_location(loc: PortLocation) -> bool:
        return loc == PortLocation.OUTPUT

    def is_output_photonic_mode_closed(self):
        return True

    @staticmethod
    def has_basic_state_equivalent() -> bool:
        return False

    @staticmethod
    def has_logical_state_equivalent() -> bool:
        return False


class CounterDetector(ADetector):
    def __init__(self, name=''):
        super().__init__(name)
        self._counter = 0

    def trigger(self, value):
        if value:
            self._counter += 1

    @property
    def count(self):
        return self._counter


class DigitalConverterDetector(ADetector):
    def __init__(self, name=''):
        super().__init__(name)
        self._connections = {}

    def trigger(self, value):
        for component, action in self._connections.items():
            action(value, component)

    def connect_to(self, obj, action_func):
        self._connections[obj] = action_func

    def is_connected_to(self, component) -> bool:
        return component in self._connections


def get_basic_state_from_ports(ports: List[APort], state: LogicalState, add_herald_and_ancillary: bool = False) -> BasicState:
    """Convert a LogicalState to a BasicState by taking in account a port list

    :param ports: port list.
    :param state: LogicalState to convert to BasicState.
    :param add_herald_and_ancillary: add the herald and ancillary port to the basic state. Default to False
    :raises ValueError: ports and state are not consistent
    :return: corresponding LogicalState.
    """
    basic_state = BasicState()
    i = 0
    for port in ports:
        if not port.has_basic_state_equivalent():
            continue
        if port.has_logical_state_equivalent():
            basic_state *= port.to_basic_state(state[i])
            i += 1
        elif add_herald_and_ancillary:
            basic_state *= port.to_basic_state()
    if len(state) != i:
        raise IndexError('Logical state and port list size do not match')
    return basic_state
