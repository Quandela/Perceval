# -*- coding: utf-8 -*-
# MIT License
#
# Copyright (c) 2022 Quandela
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# As a special exception, the copyright holders of exqalibur library give you
# permission to combine exqalibur with code included in the standard release of
# Perceval under the MIT license (or modified versions of such code). You may
# copy and distribute such a combined system following the terms of the MIT
# license for both exqalibur and Perceval. This exception for the usage of
# exqalibur is limited to the python bindings used by Perceval.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# flake8: noqa

# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: perceval_circuit.proto
"""Generated protocol buffer code."""
from google.protobuf.internal import builder as _builder
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n\x1asrc/perceval_circuit.proto\x12\x0fperceval.schema\"<\n\rComplexDouble\x12\x12\n\nreal_value\x18\x01 \x01(\x01\x12\x17\n\x0fimaginary_value\x18\x02 \x01(\x01\"\x94\x01\n\tParameter\x12\x14\n\nreal_value\x18\x01 \x01(\x01H\x00\x12\x10\n\x06symbol\x18\x02 \x01(\tH\x00\x12\x14\n\nexpression\x18\x03 \x01(\tH\x00\x12\x0c\n\x04name\x18\x04 \x01(\t\x12\x33\n\x0f\x65xpr_parameters\x18\x05 \x03(\x0b\x32\x1a.perceval.schema.ParameterB\x06\n\x04type\"<\n\x0cMatrixDouble\x12,\n\x04\x64\x61ta\x18\x01 \x03(\x0b\x32\x1e.perceval.schema.ComplexDouble\":\n\x0eMatrixSymbolic\x12(\n\x04\x64\x61ta\x18\x01 \x03(\x0b\x32\x1a.perceval.schema.Parameter\"\x93\x01\n\x06Matrix\x12\x0c\n\x04rows\x18\x01 \x01(\x05\x12\x0c\n\x04\x63ols\x18\x02 \x01(\x05\x12\x30\n\x07numeric\x18\x03 \x01(\x0b\x32\x1d.perceval.schema.MatrixDoubleH\x00\x12\x33\n\x08symbolic\x18\x04 \x01(\x0b\x32\x1f.perceval.schema.MatrixSymbolicH\x00\x42\x06\n\x04\x64\x61ta\"\xa8\x06\n\tComponent\x12\x15\n\rstarting_mode\x18\x01 \x01(\x05\x12\x0e\n\x06n_mode\x18\x02 \x01(\x05\x12\x10\n\x08offset_x\x18\x03 \x01(\x01\x12\x12\n\nannotation\x18\x04 \x01(\t\x12+\n\x07\x63ircuit\x18\n \x01(\x0b\x32\x18.perceval.schema.CircuitH\x00\x12\x36\n\rphase_shifter\x18\x0b \x01(\x0b\x32\x1d.perceval.schema.PhaseShifterH\x00\x12\x36\n\rbeam_splitter\x18\x0c \x01(\x0b\x32\x1d.perceval.schema.BeamSplitterH\x00\x12\x33\n\x0bpermutation\x18\x0e \x01(\x0b\x32\x1c.perceval.schema.PermutationH\x00\x12+\n\x07unitary\x18\x0f \x01(\x0b\x32\x18.perceval.schema.UnitaryH\x00\x12\x30\n\nwave_plate\x18\x10 \x01(\x0b\x32\x1a.perceval.schema.WavePlateH\x00\x12\x35\n\x0fhalf_wave_plate\x18\x11 \x01(\x0b\x32\x1a.perceval.schema.WavePlateH\x00\x12\x38\n\x12quarter_wave_plate\x18\x12 \x01(\x0b\x32\x1a.perceval.schema.WavePlateH\x00\x12\x44\n\x14polarization_rotator\x18\x13 \x01(\x0b\x32$.perceval.schema.PolarizationRotatorH\x00\x12\x30\n\ntime_delay\x18\x14 \x01(\x0b\x32\x1a.perceval.schema.TimeDelayH\x00\x12I\n\x17polarized_beam_splitter\x18\x15 \x01(\x0b\x32&.perceval.schema.PolarizedBeamSplitterH\x00\x12+\n\x07\x62\x61rrier\x18\x16 \x01(\x0b\x32\x18.perceval.schema.BarrierH\x00\x12\x34\n\x0closs_channel\x18\x17 \x01(\x0b\x32\x1c.perceval.schema.LossChannelH\x00\x42\x06\n\x04type\"f\n\x0cPhaseShifter\x12\'\n\x03phi\x18\x01 \x01(\x0b\x32\x1a.perceval.schema.Parameter\x12-\n\tmax_error\x18\x02 \x01(\x0b\x32\x1a.perceval.schema.Parameter\"\xcc\x02\n\x0c\x42\x65\x61mSplitter\x12<\n\nconvention\x18\x01 \x01(\x0e\x32(.perceval.schema.BeamSplitter.Convention\x12)\n\x05theta\x18\x02 \x01(\x0b\x32\x1a.perceval.schema.Parameter\x12*\n\x06phi_tl\x18\x03 \x01(\x0b\x32\x1a.perceval.schema.Parameter\x12*\n\x06phi_bl\x18\x04 \x01(\x0b\x32\x1a.perceval.schema.Parameter\x12*\n\x06phi_tr\x18\x05 \x01(\x0b\x32\x1a.perceval.schema.Parameter\x12*\n\x06phi_br\x18\x06 \x01(\x0b\x32\x1a.perceval.schema.Parameter\"#\n\nConvention\x12\x06\n\x02Rx\x10\x00\x12\x06\n\x02Ry\x10\x01\x12\x05\n\x01H\x10\x02\"\x17\n\x15PolarizedBeamSplitter\"W\n\x07Unitary\x12$\n\x03mat\x18\x01 \x01(\x0b\x32\x17.perceval.schema.Matrix\x12\x0c\n\x04name\x18\x02 \x01(\t\x12\x18\n\x10use_polarization\x18\x03 \x01(\x08\"#\n\x0bPermutation\x12\x14\n\x0cpermutations\x18\x01 \x03(\x05\"_\n\tWavePlate\x12)\n\x05\x64\x65lta\x18\x01 \x01(\x0b\x32\x1a.perceval.schema.Parameter\x12\'\n\x03xsi\x18\x02 \x01(\x0b\x32\x1a.perceval.schema.Parameter\"@\n\x13PolarizationRotator\x12)\n\x05\x64\x65lta\x18\x01 \x01(\x0b\x32\x1a.perceval.schema.Parameter\"3\n\tTimeDelay\x12&\n\x02\x64t\x18\x01 \x01(\x0b\x32\x1a.perceval.schema.Parameter\"7\n\x0bLossChannel\x12(\n\x04loss\x18\x01 \x01(\x0b\x32\x1a.perceval.schema.Parameter\"\x1a\n\x07\x42\x61rrier\x12\x0f\n\x07visible\x18\x01 \x01(\x08\"k\n\x07\x43ircuit\x12\x0c\n\x04name\x18\x01 \x01(\t\x12\x0e\n\x06n_mode\x18\x02 \x01(\x05\x12\x12\n\nannotation\x18\x03 \x01(\t\x12.\n\ncomponents\x18\x04 \x03(\x0b\x32\x1a.perceval.schema.Component\"F\n\rBSLayeredPPNR\x12\x0c\n\x04name\x18\x01 \x01(\t\x12\x11\n\tbs_layers\x18\x02 \x01(\x05\x12\x14\n\x0creflectivity\x18\x03 \x01(\x01\"A\n\x08\x44\x65tector\x12\x0c\n\x04name\x18\x01 \x01(\t\x12\x0f\n\x07n_wires\x18\x02 \x01(\x05\x12\x16\n\x0emax_detections\x18\x03 \x01(\x05\x62\x06proto3')

_builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, globals())
_builder.BuildTopDescriptorsAndMessages(DESCRIPTOR, 'src.perceval_circuit_pb2', globals())
if _descriptor._USE_C_DESCRIPTORS == False:

  DESCRIPTOR._options = None
  _COMPLEXDOUBLE._serialized_start=47
  _COMPLEXDOUBLE._serialized_end=107
  _PARAMETER._serialized_start=110
  _PARAMETER._serialized_end=258
  _MATRIXDOUBLE._serialized_start=260
  _MATRIXDOUBLE._serialized_end=320
  _MATRIXSYMBOLIC._serialized_start=322
  _MATRIXSYMBOLIC._serialized_end=380
  _MATRIX._serialized_start=383
  _MATRIX._serialized_end=530
  _COMPONENT._serialized_start=533
  _COMPONENT._serialized_end=1341
  _PHASESHIFTER._serialized_start=1343
  _PHASESHIFTER._serialized_end=1445
  _BEAMSPLITTER._serialized_start=1448
  _BEAMSPLITTER._serialized_end=1780
  _BEAMSPLITTER_CONVENTION._serialized_start=1745
  _BEAMSPLITTER_CONVENTION._serialized_end=1780
  _POLARIZEDBEAMSPLITTER._serialized_start=1782
  _POLARIZEDBEAMSPLITTER._serialized_end=1805
  _UNITARY._serialized_start=1807
  _UNITARY._serialized_end=1894
  _PERMUTATION._serialized_start=1896
  _PERMUTATION._serialized_end=1931
  _WAVEPLATE._serialized_start=1933
  _WAVEPLATE._serialized_end=2028
  _POLARIZATIONROTATOR._serialized_start=2030
  _POLARIZATIONROTATOR._serialized_end=2094
  _TIMEDELAY._serialized_start=2096
  _TIMEDELAY._serialized_end=2147
  _LOSSCHANNEL._serialized_start=2149
  _LOSSCHANNEL._serialized_end=2204
  _BARRIER._serialized_start=2206
  _BARRIER._serialized_end=2232
  _CIRCUIT._serialized_start=2234
  _CIRCUIT._serialized_end=2341
  _BSLAYEREDPPNR._serialized_start=2343
  _BSLAYEREDPPNR._serialized_end=2413
  _DETECTOR._serialized_start=2415
  _DETECTOR._serialized_end=2480
# @@protoc_insertion_point(module_scope)
