# MIT License
#
# Copyright (c) 2022 Quandela
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# As a special exception, the copyright holders of exqalibur library give you
# permission to combine exqalibur with code included in the standard release of
# Perceval under the MIT license (or modified versions of such code). You may
# copy and distribute such a combined system following the terms of the MIT
# license for both exqalibur and Perceval. This exception for the usage of
# exqalibur is limited to the python bindings used by Perceval.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

from base64 import b64decode

import perceval.components.port as port
from perceval.utils import Encoding
from perceval.serialization import _schema_circuit_pb2 as pb


def deserialize_herald(serial_herald) -> port.Herald:
    if not isinstance(serial_herald, pb.Herald):
        pb_binary_repr = serial_herald
        serial_herald = pb.Herald()
        if isinstance(pb_binary_repr, bytes):
            serial_herald.ParseFromString(pb_binary_repr)
        else:
            serial_herald.ParseFromString(b64decode(pb_binary_repr))

    herald = port.Herald(serial_herald.value)
    herald._autogenerated_name = serial_herald.autogenerated_name
    if serial_herald.name:  # Default ''
        herald.name = serial_herald.name
    return herald

def deserialize_port(serial_port) -> port.Port:
    if not isinstance(serial_port, pb.Port):
        pb_binary_repr = serial_port
        serial_port = pb.Port()
        if isinstance(pb_binary_repr, bytes):
            serial_port.ParseFromString(pb_binary_repr)
        else:
            serial_port.ParseFromString(b64decode(pb_binary_repr))

    encoding = Encoding(serial_port.encoding)
    return port.Port(encoding, serial_port.name)
